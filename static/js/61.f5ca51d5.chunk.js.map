{"version":3,"file":"static/js/61.f5ca51d5.chunk.js","mappings":"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","sources":["components/notifyOptions/notifyOptions.js","redux/contacts/selectors.js","components/FormList/FormList.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Layout/Layout.styled.js","components/Layout/Title.jsx","pages/Contacts.jsx"],"sourcesContent":["export const notifyOptions = {\n  position: 'bottom-left',\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'colored',\n};\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { UserAddOutlined } from '@ant-design/icons';\nimport { Form, Label, Input, Button, Span } from './FormList.styled';\nimport { notifyOptions } from '../notifyOptions/notifyOptions';\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst FormList = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const normalizedName = name.toLowerCase();\n    const isAdded = contacts.find(\n      el => el.name.toLowerCase() === normalizedName\n    );\n\n    if (isAdded) {\n      toast.error(`${name}: is already in contacts`, notifyOptions);\n      return;\n    }\n\n    dispatch(addContact({ id: nanoid(), name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        <Span>Name</Span>\n        <Input\n          type=\"text\"\n          placeholder=\"Your name\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        <Span>Number</Span>\n        <Input\n          type=\"tel\"\n          placeholder=\"Your number\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">\n        Add to contacts\n        <UserAddOutlined />\n      </Button>\n    </Form>\n  );\n};\n\nexport default FormList;\n","import styled from '@emotion/styled';\n\nexport const ListWrap = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding: ${p => p.theme.space[4]}px;\n`;\nexport const List = styled.li`\n  padding: 10px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: ${p => p.theme.fontSize.m};\n  color: ${p => p.theme.colors.white};\n`;\n","import React from 'react';\nimport { ListWrap, List } from './ContactList.styled';\nimport { Button } from 'components/FormList/FormList.styled';\nimport { UserDeleteOutlined } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ListWrap>\n      {contacts.map(({ id, name, number }) => (\n        <List key={id}>\n          {name + ' : ' + number}\n\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            <UserDeleteOutlined />\n          </Button>\n        </List>\n      ))}\n    </ListWrap>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled'\n\nexport const FormFilter = styled.form`\ndisplay: flex;\njustify-content: center;\n`\nexport const LabelFilter = styled.label`\ncolor: ${(p) => p.theme.colors.grey};\n`\nexport const InputFilter = styled.input``","import React from 'react';\nimport { FormFilter, LabelFilter } from './Filter.styled';\nimport { Input } from '../FormList/FormList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  return (\n    <FormFilter>\n      <LabelFilter>\n        <Input\n          type=\"name\"\n          value={value}\n          onChange={handleChange}\n          placeholder=\"Please enter a name to search\"\n        />\n      </LabelFilter>\n    </FormFilter>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n    padding: 40px;\n    width: 400px;\n    margin: 0 auto;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  font-size: ${(p) => p.theme.fontSize.xl};\n  color: ${(p) => p.theme.colors.white};\n`;","import PropTypes from 'prop-types';\nimport { Title } from './Layout.styled';\n\nconst GlobalTitle = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n\nGlobalTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default GlobalTitle;\n","import { HelmetProvider } from 'react-helmet-async';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { fetchAll } from '../redux/contacts/operations';\nimport FormList from 'components/FormList/FormList';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport GlobalTitle from 'components/Layout/Title';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAll());\n  }, [dispatch]);\n\n  return (\n    <>\n      <HelmetProvider>\n        <GlobalTitle title=\"Phonebook\" />\n        <FormList />\n        <GlobalTitle title=\"Contacts\" />\n        <Filter />\n        <ContactList />\n        <ToastContainer />\n      </HelmetProvider>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["notifyOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","getFilter","state","filter","getVisibleContacts","contacts","items","getContacts","normalizedFilter","toLowerCase","contact","name","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","_e$target","target","value","_jsxs","Form","onSubmit","event","preventDefault","normalizedName","find","el","toast","concat","addContact","id","nanoid","children","Label","_jsx","Span","Input","type","placeholder","onChange","pattern","title","required","Button","UserAddOutlined","ListWrap","styled","_templateObject","_taggedTemplateLiteral","p","space","List","_templateObject2","fontSize","m","colors","white","map","_ref","onClick","deleteContact","UserDeleteOutlined","FormFilter","LabelFilter","grey","_templateObject3","changeFilter","Title","xl","useEffect","fetchAll","_Fragment","HelmetProvider","GlobalTitle","FormList","Filter","ContactList","ToastContainer"],"sourceRoot":""}